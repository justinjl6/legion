################################################################################
"""
Django settings for legion project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""


################################################################################
# Import required modules

import os
import configparser


################################################################################
# Set up directories and open config file

BASE_DIR    = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONF_DIR    = '/etc/legion'
CONF_FILE   = os.path.join( CONF_DIR, 'django.cfg' )

config = configparser.ConfigParser()
config.read( CONF_FILE )


################################################################################
# Some django settings will be read from the config file

# Main settings
DEBUG           = config.get( 'main', 'debug' )
SECRET_KEY      = config.get( 'main', 'secret_key' )
ALLOWED_HOSTS   = config.get( 'main', 'allowed_hosts' )

# Email settings
DEFAULT_FROM_EMAIL      = config.get( 'mail', 'default_from_email' )
EMAIL_HOST              = config.get( 'mail', 'email_host' )
EMAIL_HOST_PASSWORD     = config.get( 'mail', 'email_host_password' )
EMAIL_HOST_USER         = config.get( 'mail', 'email_host_user' )
EMAIL_PORT              = config.get( 'mail', 'email_port' )
EMAIL_SUBJECT_PREFIX    = config.get( 'mail', 'email_subject_prefix' )
EMAIL_USE_TLS           = config.get( 'mail', 'email_use_tls' )
EMAIL_USE_SSL           = config.get( 'mail', 'email_use_ssl' )
EMAIL_TIMEOUT           = config.get( 'mail', 'email_timeout' )
SERVER_EMAIL            = config.get( 'mail', 'server_email' )



################################################################################
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'legion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'legion.wsgi.application'


################################################################################
# Database configuration

DATABASE_BACKEND = config.get( 'main', 'database' )

if ( DATABASE_BACKEND == 'sqlite' ):
    DATABASE_DEFAULT = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME'  : config.get( 'sqlite', 'name' ),
    }
elif ( DATABASE_BACKEND == 'mysql' ):
    DATABASE_DEFAULT = {
        'ENGINE'    : 'django.db.backends.mysql',
        'NAME'      : config.get( 'mysql', 'name' ),
        'USER'      : config.get( 'mysql', 'user' ),
        'PASSWORD'  : config.get( 'mysql', 'password' ),
        'HOST'      : config.get( 'mysql', 'host' ),
        'PORT'      : config.get( 'mysql', 'port' ),
    }
    
DATABASES = {
    'default': DATABASE_DEFAULT
}


################################################################################
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


################################################################################
# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


###############################################################################G
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'


################################################################################
################################################################################

